options {
  LOOKAHEAD=3;
  STATIC=false;
  CACHE_TOKENS=true;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE=false;
  UNICODE_INPUT=true;
  DEBUG_PARSER=false;
  DEBUG_LOOKAHEAD=false;
  DEBUG_TOKEN_MANAGER=false;
}

PARSER_BEGIN(WikiParser)
package code.lucamarrocco.wiki.parser;


import java.io.*;
import org.apache.commons.logging.*;
import code.lucamarrocco.wiki.ast.*;


public final class WikiParser {
	private Log logger = LogFactory.getLog(WikiParser.class);

    private static WikiParser parser;

    public static Content parse(InputStream in) throws ParseException {
        if (parser == null) {
            parser = new WikiParser(in);
        } else {
            parser.ReInit(in);
        }
        return parser.Content();
    }
}
PARSER_END(WikiParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\f"
}

TOKEN :
{
  < NOT: "!" >
|
  < BREAKLINE: ("\n" | "\r")+>
|
  < TITLE: "=" >
|
  < ITALIC: "''" >
|
  < BOLD: "'''" >
|
  < BOLDITALIC: "'''''" >
|
  < UNDERLINE: "_" >
|
  < OLIOLI: "##" >
|
  < OLI: "#" >
|
  < ULIULI: "**" >
|
  < ULI: "*" >
|
  < LBRACKET: "[" >
|
  < RBRACKET: "]" >
|
  < WIKIWORD: ["A"-"Z"](["a"-"z"])+["A"-"Z"](["a"-"z"])+(["a"-"z"]|["A"-"Z"])* >
|
  < HTTPSTRING: "http://" <STRING> >
|
  < STRING: (~["\n", "\r", "=", "[", "]", "'", "_", "*", "#", " ", "\t", "\n", "\r"])+ >
}

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
 
void End():
{}
{
	<EOF> | <BREAKLINE>
}

Content Content():
{
	Content content = new Content();
	BodyDeclaration bodyDeclaration;
}
{
	(bodyDeclaration = BodyDeclaration() { content.addBodyDeclaration(bodyDeclaration); } )*  End()
	{ return content; }
}

BodyDeclaration BodyDeclaration():
{
	BodyDeclaration bodyDeclaration;
}
{
	bodyDeclaration = List() { return bodyDeclaration; }
	|
	bodyDeclaration = LinkText() { return bodyDeclaration; }
	|
	bodyDeclaration = TitleText(0) { return bodyDeclaration; }
	|
	bodyDeclaration = DecoratedText() { return bodyDeclaration; }
	|
	bodyDeclaration = Text() { return bodyDeclaration; }
	|
	bodyDeclaration = BreakLine() { return bodyDeclaration; }
}

TitleText TitleText(int level):
{
	TitleText titleText;
	Text text;
}
{
	<TITLE> titleText = TitleText(level + 1) (<TITLE> | End()) { return titleText; }
	|
	text = Text() { return new TitleText().setLevel(level).setText(text); }
}


DecoratedText DecoratedText():
{
	DecoratedText decoratedText;
	Text text;
}
{
	<BOLD> decoratedText = DecoratedText() (<BOLD> | End()) { return new DecoratedBoldText().setText(decoratedText.getText()); }
	|
	<BOLDITALIC> decoratedText = DecoratedText()  (<BOLDITALIC> | End()) { return new DecoratedBoldItalicText().setText(decoratedText.getText()); }
	|
	<ITALIC> decoratedText = DecoratedText()  (<ITALIC> | End()){ return new DecoratedItalicText().setText(decoratedText.getText()); }
	|
	<UNDERLINE> decoratedText = DecoratedText() (<UNDERLINE> | End()){ return new DecoratedUnderlineText().setText(decoratedText.getText()); }
	|
	text = Text() { return new DecoratedNormalText().setText(text); }
}

List List():
{
	List list;
}
{
	list = OrderedList() { return list; }
	|
	list = UnorderedList() { return list; }
}

List UnorderedList():
{
	Text text;
	List list = new List().setType(List.UNORDERED_LIST);
	List nestedList;
}
{
	<ULI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } [<BREAKLINE> nestedList = NestedUnorderedList() { list.addListItem(nestedList); }] (<BREAKLINE> <ULI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } )* End() { return list; }
	|
	<ULI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } [<BREAKLINE> nestedList = NestedUnorderedList() { list.addListItem(nestedList); }] End() { return list; }
}

List NestedUnorderedList():
{
	Text text;
	List list = new List().setType(List.UNORDERED_LIST);
}
{
	<ULIULI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } (<BREAKLINE> <ULIULI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } )* { return list; }
	|
	<ULIULI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } (<BREAKLINE> <ULIULI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } )* { return list; }
	|
	<ULIULI> text = DecoratedText() { return list.addListItem(new ListItem().setText(text)); }
}

List OrderedList():
{
	Text text;
	List list = new List().setType(List.ORDERED_LIST);
	List nestedList;
}
{
	<OLI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } [<BREAKLINE> nestedList = NestedOrderedList() { list.addListItem(nestedList); }] (<BREAKLINE> <OLI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } )* End() { return list; }
	|
	<OLI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } [<BREAKLINE> nestedList = NestedOrderedList() { list.addListItem(nestedList); }] End() { return list; }
}

List NestedOrderedList():
{
	Text text;
	List list = new List().setType(List.ORDERED_LIST);
}
{
	<OLIOLI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } (<BREAKLINE> <OLIOLI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } )* { return list; }
	|
	<OLIOLI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } (<BREAKLINE> <OLIOLI> text = DecoratedText() { list.addListItem(new ListItem().setText(text)); } )* { return list; }
	|
	<OLIOLI> text = DecoratedText() { return list.addListItem(new ListItem().setText(text)); }
}


LinkText LinkText():
{
	LinkText href = null;
	Text description = null;
	String string;
}
{
	href = HyperLink() { return href; }
	|
	<LBRACKET> href = HyperLink() [description = Text() { href.setText(description); }] (<RBRACKET> | End()) { return href; }
	|
	<LBRACKET> <STRING> { string = token.image; } (<RBRACKET> | End()) { return new LinkText().setHref(string).setText(new Text().setValue(string)); }
}


LinkText HyperLink():
{
}
{
	<HTTPSTRING> { return new LinkText().setHref(token.image).setText(new Text().setValue(token.image)); }
	|
	<WIKIWORD> { return new LinkText().setHref(token.image).setText(new Text().setValue(token.image)); }
}

Text Text():
{
	Text text;
}
{
	{ StringBuffer stringBuffer = new StringBuffer(); } 
	(<STRING> { stringBuffer.append(token.image); stringBuffer.append(" "); } )+ 
	{ return new Text().setValue(stringBuffer.toString().replaceAll(" $", "")); }
	|
	<NOT> <STRING> { return new Text().setValue(token.image); }
	|
	"'" { return new Text().setValue("'"); }
}

BreakLine BreakLine():
{
}
{
	<BREAKLINE> { return new BreakLine(); }
}